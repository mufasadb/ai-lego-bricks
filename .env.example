# AI Lego Bricks - Environment Variables Configuration
# Copy this file to .env and fill in the values you need

# ============================================================================
# LLM PROVIDERS - Configure the AI providers you want to use
# ============================================================================

# OpenAI (GPT models)
# Required for: OpenAI chat, TTS, and structured responses
# Get your key at: https://platform.openai.com/api-keys
OPENAI_API_KEY=your_openai_api_key_here

# Anthropic Claude
# Required for: Claude chat and structured responses  
# Get your key at: https://console.anthropic.com/
ANTHROPIC_API_KEY=your_anthropic_api_key_here

# Google Gemini
# Required for: Gemini chat, vision, and structured responses
# Get your key at: https://makersuite.google.com/app/apikey
GOOGLE_API_KEY=your_google_api_key_here

# Ollama (Local models)
# Required for: Local LLM execution
# Default works if Ollama is running locally
OLLAMA_URL=http://localhost:11434

# ============================================================================
# MEMORY & VECTOR STORAGE - For semantic memory and retrieval
# ============================================================================

# Supabase (Vector database)
# Required for: Vector-based semantic memory
# Get credentials at: https://supabase.com/dashboard
SUPABASE_URL=your_supabase_project_url
SUPABASE_KEY=your_supabase_anon_key

# Neo4j (Graph database)  
# Required for: Graph-based memory relationships
# Local or cloud instance
NEO4J_URI=bolt://localhost:7687
NEO4J_USER=neo4j
NEO4J_PASSWORD=your_neo4j_password

# ============================================================================
# TEXT-TO-SPEECH PROVIDERS - For voice output
# ============================================================================

# Google Cloud Text-to-Speech
# Required for: Google TTS voices
# Set up service account and download JSON key file
GOOGLE_APPLICATION_CREDENTIALS=/path/to/your/service-account-key.json

# Coqui TTS (Local)
# Required for: Local TTS models
# Usually works with default settings
COQUI_TTS_MODEL=tts_models/en/ljspeech/tacotron2-DDC

# ============================================================================
# TOOLS & INTEGRATIONS - For external service access
# ============================================================================

# GitHub API
# Required for: GitHub tools and integrations
# Get token at: https://github.com/settings/tokens
GITHUB_TOKEN=your_github_personal_access_token

# Slack Webhook
# Required for: Slack notifications and messaging
# Get webhook URL from Slack app configuration
SLACK_WEBHOOK_URL=https://hooks.slack.com/services/your/webhook/url
SLACK_SIGNING_SECRET=your_slack_signing_secret

# Home Assistant
# Required for: Smart home control tools
HOME_ASSISTANT_URL=http://your-home-assistant:8123
HOME_ASSISTANT_TOKEN=your_long_lived_access_token

# ============================================================================
# OPTIONAL CONFIGURATION - Fine-tuning and advanced settings
# ============================================================================

# Debug and Logging
DEBUG=false
LOG_LEVEL=INFO

# Default LLM Settings
DEFAULT_LLM_PROVIDER=gemini
DEFAULT_LLM_MODEL=gemini-1.5-flash
DEFAULT_TEMPERATURE=0.7

# Memory Configuration
DEFAULT_MEMORY_PROVIDER=supabase
MEMORY_SIMILARITY_THRESHOLD=0.7

# TTS Configuration  
DEFAULT_TTS_PROVIDER=openai
DEFAULT_TTS_VOICE=alloy

# ============================================================================
# QUICK START CONFIGURATIONS
# ============================================================================

# For Ollama-only setup (minimal requirements):
# 1. Install: pip install -e ".[ollama]"
# 2. Set: OLLAMA_URL=http://localhost:11434
# 3. Start Ollama and pull a model: ollama pull llama3.1:8b

# For OpenAI-only setup:
# 1. Install: pip install -e ".[openai]" 
# 2. Set: OPENAI_API_KEY=your_key

# For full setup with all features:
# 1. Install: pip install -e ".[all]"
# 2. Configure all relevant API keys above

# ============================================================================
# NOTES
# ============================================================================

# - Only set the variables for services you plan to use
# - Missing variables will show warnings but won't break core functionality
# - Some combinations work together (e.g., OpenAI for both chat and TTS)
# - Ollama requires no API keys and works great for local development
# - Vector databases (Supabase/Neo4j) are only needed for memory features