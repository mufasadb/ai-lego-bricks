name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch: # Allow manual trigger for integration tests

jobs:
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run linting
      run: |
        black --check .
        flake8 ailego/ agent_orchestration/ llm/ memory/ chat/ prompt/ tts/ chunking/ services/ tests/

    # Temporarily disabled - TODO: Fix mypy type checking errors
    # - name: Run type checking
    #   run: |
    #     mypy ailego/ agent_orchestration/ llm/ memory/ chat/ prompt/ tts/ chunking/ services/

    - name: Test CLI installation
      run: |
        ailego --help
        ailego version
        ailego test --help

  unit-tests:
    name: Unit Tests (No Network)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Verify VCR cassettes exist
      run: |
        if [ ! -d "tests/cassettes" ] || [ -z "$(find tests/cassettes -name '*.yaml' -type f)" ]; then
          echo "⚠️ No VCR cassettes found. Unit tests may fail."
          echo "Run 'ailego test record' locally to generate cassettes."
        else
          cassette_count=$(find tests/cassettes -name '*.yaml' -type f | wc -l)
          echo "✓ Found $cassette_count VCR cassettes"
        fi

    - name: Run unit tests
      run: |
        pytest tests/unit/ \
          --record-mode=none \
          -m "unit" \
          --cov=. \
          --cov-report=xml \
          --cov-report=term \
          -v

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.10'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  cassette-validation:
    name: Validate VCR Cassettes
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, '[update-cassettes]')

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Validate cassettes for security
      run: |
        ailego test validate

    - name: Check cassette file sizes
      run: |
        if [ -d "tests/cassettes" ]; then
          large_files=$(find tests/cassettes -name '*.yaml' -size +1M)
          if [ -n "$large_files" ]; then
            echo "⚠️ Large cassette files found:"
            echo "$large_files"
            echo "Consider reviewing these files for sensitive data."
          else
            echo "✓ All cassette files are reasonably sized"
          fi
        fi

  integration-tests:
    name: Integration Tests (Manual Trigger)
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run integration tests
      env:
        # These would need to be set as repository secrets
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        GOOGLE_AI_STUDIO_KEY: ${{ secrets.GOOGLE_AI_STUDIO_KEY }}
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
        NEO4J_URI: ${{ secrets.NEO4J_URI }}
        NEO4J_USERNAME: ${{ secrets.NEO4J_USERNAME }}
        NEO4J_PASSWORD: ${{ secrets.NEO4J_PASSWORD }}
      run: |
        pytest tests/integration/ \
          --record-mode=none \
          -m "integration" \
          -v

  security:
    runs-on: ubuntu-latest
    needs: lint

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml] safety

    - name: Run Bandit security check
      run: |
        bandit -r ailego/ agent_orchestration/ llm/ memory/ chat/ prompt/ tts/ chunking/ -f json -o bandit-report.json
      continue-on-error: true

    - name: Run Safety check
      run: |
        safety check --json --output safety-report.json
      continue-on-error: true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
      if: always()

  build:
    runs-on: ubuntu-latest
    needs: [lint, security]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/