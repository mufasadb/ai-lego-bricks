name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install pytest-xdist  # For parallel test execution

    - name: Run linting
      run: |
        black --check .
        flake8 ailego/ agent_orchestration/ llm/ memory/ chat/ prompt/ tts/ chunking/

    - name: Run type checking
      run: |
        mypy ailego/ agent_orchestration/ llm/ memory/ chat/ prompt/ tts/

    - name: Test CLI installation
      run: |
        ailego --help
        ailego version

    - name: Run unit tests
      run: |
        pytest tests/unit/ -v --tb=short -n auto

    - name: Run integration tests
      run: |
        pytest tests/integration/ -v --tb=short -m integration
      env:
        # Mock environment variables for integration tests
        SUPABASE_URL: https://test.supabase.co
        SUPABASE_ANON_KEY: test_key
        ANTHROPIC_API_KEY: test_key
        OPENAI_API_KEY: test_key
        GOOGLE_API_KEY: test_key

    - name: Generate coverage report
      run: |
        pytest --cov=ailego --cov=agent_orchestration --cov=llm --cov=memory --cov=chat --cov=prompt --cov=tts --cov=chunking --cov-report=xml --cov-report=term

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  performance:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,performance]"

    - name: Run performance tests
      run: |
        pytest tests/performance/ -v --tb=short -m performance

    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: performance-results.json
      if: always()

  security:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml] safety

    - name: Run Bandit security check
      run: |
        bandit -r ailego/ agent_orchestration/ llm/ memory/ chat/ prompt/ tts/ chunking/ -f json -o bandit-report.json
      continue-on-error: true

    - name: Run Safety check
      run: |
        safety check --json --output safety-report.json
      continue-on-error: true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
      if: always()

  build:
    runs-on: ubuntu-latest
    needs: [test, security]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/