Eval
Lets make sure our eval provides feedback (from the LLM as a judge based on which of the criteria it didnt meet) so that a prompt could try to zero in on the correct answer.

Prompt stuff
how does our prompt and prompts setup work now and how does it interface with our eval system? how can i use it if iwanted to make a prompt for an agent and iterate over it, or write evals for it to check its working


Can you please have a subagent go through each subfolder and remove the example python files, make sure there is some broad coverage in the corresponding readme (for each folder) to clean up the projects space.

Lets review what is covered by each of the readme's in subfolders, in claude knowledge, and then think deeply about what should really be in the main structure readme, present a few general approaches that might make sense, considering consumption by a human, why and what this app is useful for and how to go about getting information on each section in more detail (and maybe some very light or overarchign examples). 

how does the agent logger work, does it have to be invoked?


 Main README Structure Overhaul

  - Current: 1130+ lines, comprehensive reference manual
  - Target: ~400 lines, entry point and navigation guide
  - Changes:
    - Reduce feature explanations to 1-2 sentences + link
    - Move detailed examples to subfolder docs
    - Create clear section hierarchy with progressive disclosure
    - Add visual navigation elements (tables, diagrams)

  2. Content Reorganization

  - Move from main README to subfolders:
    - Detailed API examples → service-specific READMEs
    - Comprehensive configuration → setup documentation
    - Advanced use cases → agent orchestration examples
  - Keep in main README:
    - Quick start (5-minute experience)
    - Core concepts overview
    - Navigation to detailed docs

  3. Missing Service Documentation

  - Create missing README files:
    - stt/README.md (currently only has stt-readme.md)
    - pdf_to_text/README.md
    - chunking/README.md
    - credentials/README.md
    - prompt/README.md
  - Standardize naming: Convert -readme.md files to README.md

  4. Duplicate Content Cleanup

  - Consolidate:
    - TOOLS_README.md and tools/tools-readme.md (same content, different locations)
    - Credential management examples (scattered across multiple files)
    - Provider setup instructions (repeated in multiple service docs)
  - Create authoritative sources: One definitive location per topic

  5. Navigation and Cross-Linking

  - Add navigation elements:
    - Quick-access table for "I want to..." scenarios
    - Service compatibility matrix
    - Visual component relationship diagram
  - Fix broken links: Ensure all main README links point to correct locations
  - Add breadcrumb navigation: Help users understand where they are

  6. Learning Path Creation

  - Progressive complexity structure:
    - Beginner: Install → Simple chat agent
    - Intermediate: Add memory → Multi-step workflows
    - Advanced: Custom tools → Production deployment
  - Create guided tutorials: Step-by-step walkthroughs for common patterns

  7. Examples and Use Cases

  - Move detailed examples from main README to:
    - examples/ folder for runnable code
    - Service-specific READMEs for feature demos
    - Agent orchestration examples for workflows
  - Keep minimal examples in main README (1-3 lines max)

  8. Setup and Configuration

  - Streamline setup section:
    - Single command quick start
    - Link to comprehensive setup guide
    - Environment verification steps
  - Improve setup documentation:
    - Better organize setup/README.md
    - Add troubleshooting section
    - Include common configuration patterns

  9. CLI Documentation

  - Expand CLI section:
    - Add more examples of common commands
    - Include output examples
    - Link to complete CLI reference
  - Improve CLI help: Ensure ailego --help provides good guidance

  10. Visual Elements

  - Add diagrams:
    - Architecture overview diagram
    - Service interaction flow
    - Data flow for common patterns
  - Improve formatting:
    - Better use of tables for comparisons
    - Consistent emoji usage
    - Clear section dividers
