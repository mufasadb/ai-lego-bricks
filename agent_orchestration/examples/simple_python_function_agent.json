{
  "name": "Simple Python Function Agent",
  "description": "Demonstrates using Python functions as workflow nodes",
  "config": {
    "memory_backend": "auto",
    "default_llm_provider": "gemini",
    "max_iterations": 10
  },
  "steps": [
    {
      "id": "get_input",
      "type": "input",
      "description": "Get numbers to process",
      "config": {
        "value": {"numbers": [1, 2, 3, 4, 5]}
      },
      "outputs": ["numbers"]
    },
    {
      "id": "calculate_stats",
      "type": "python_function",
      "description": "Calculate statistics using Python function",
      "config": {
        "function": {
          "code": "def calculate_statistics(numbers):\n    \"\"\"Calculate basic statistics for a list of numbers\"\"\"\n    import statistics\n    \n    if not numbers:\n        return {'error': 'No numbers provided'}\n    \n    result = {\n        'count': len(numbers),\n        'sum': sum(numbers),\n        'mean': statistics.mean(numbers),\n        'median': statistics.median(numbers),\n        'min': min(numbers),\n        'max': max(numbers)\n    }\n    \n    if len(numbers) > 1:\n        result['std_dev'] = statistics.stdev(numbers)\n    \n    return result",
          "name": "calculate_statistics"
        }
      },
      "inputs": {
        "numbers": {"from_step": "get_input", "field": "numbers"}
      },
      "outputs": ["result"]
    },
    {
      "id": "format_output",
      "type": "python_function",
      "description": "Format the statistics for display",
      "config": {
        "function": {
          "code": "def format_statistics(stats):\n    \"\"\"Format statistics into a readable string\"\"\"\n    if 'error' in stats:\n        return {'formatted_output': stats['error']}\n    \n    lines = [\n        f\"Statistics for {stats['count']} numbers:\",\n        f\"Sum: {stats['sum']}\",\n        f\"Mean: {stats['mean']:.2f}\",\n        f\"Median: {stats['median']}\",\n        f\"Range: {stats['min']} - {stats['max']}\"\n    ]\n    \n    if 'std_dev' in stats:\n        lines.append(f\"Standard Deviation: {stats['std_dev']:.2f}\")\n    \n    return {'formatted_output': '\\n'.join(lines)}",
          "name": "format_statistics"
        }
      },
      "inputs": {
        "stats": {"from_step": "calculate_stats", "field": "result"}
      },
      "outputs": ["formatted_output"]
    },
    {
      "id": "output_result",
      "type": "output",
      "description": "Output the final formatted result",
      "inputs": {
        "result": {"from_step": "format_output", "field": "formatted_output"}
      }
    }
  ]
}